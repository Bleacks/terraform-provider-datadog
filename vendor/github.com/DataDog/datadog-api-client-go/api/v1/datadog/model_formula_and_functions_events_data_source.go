/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// FormulaAndFunctionsEventsDataSource The data source being queried.
type FormulaAndFunctionsEventsDataSource string

// List of FormulaAndFunctionsEventsDataSource
const (
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_LOGS             FormulaAndFunctionsEventsDataSource = "logs"
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_ANALYZED_SPANS   FormulaAndFunctionsEventsDataSource = "analyzed_spans"
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_NETWORK          FormulaAndFunctionsEventsDataSource = "network"
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_RUM              FormulaAndFunctionsEventsDataSource = "rum"
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_SECURITY_SIGNALS FormulaAndFunctionsEventsDataSource = "security_signals"
	FORMULAANDFUNCTIONSEVENTSDATASOURCE_PROFILES         FormulaAndFunctionsEventsDataSource = "profiles"
)

func (v *FormulaAndFunctionsEventsDataSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormulaAndFunctionsEventsDataSource(value)
	for _, existing := range []FormulaAndFunctionsEventsDataSource{"logs", "analyzed_spans", "network", "rum", "security_signals", "profiles"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormulaAndFunctionsEventsDataSource", value)
}

// Ptr returns reference to FormulaAndFunctionsEventsDataSource value
func (v FormulaAndFunctionsEventsDataSource) Ptr() *FormulaAndFunctionsEventsDataSource {
	return &v
}

type NullableFormulaAndFunctionsEventsDataSource struct {
	value *FormulaAndFunctionsEventsDataSource
	isSet bool
}

func (v NullableFormulaAndFunctionsEventsDataSource) Get() *FormulaAndFunctionsEventsDataSource {
	return v.value
}

func (v *NullableFormulaAndFunctionsEventsDataSource) Set(val *FormulaAndFunctionsEventsDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFormulaAndFunctionsEventsDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFormulaAndFunctionsEventsDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormulaAndFunctionsEventsDataSource(val *FormulaAndFunctionsEventsDataSource) *NullableFormulaAndFunctionsEventsDataSource {
	return &NullableFormulaAndFunctionsEventsDataSource{value: val, isSet: true}
}

func (v NullableFormulaAndFunctionsEventsDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormulaAndFunctionsEventsDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
