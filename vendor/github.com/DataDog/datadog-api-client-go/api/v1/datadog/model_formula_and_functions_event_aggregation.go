/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// FormulaAndFunctionsEventAggregation The aggregation method.
type FormulaAndFunctionsEventAggregation string

// List of FormulaAndFunctionsEventAggregation
const (
	FORMULAANDFUNCTIONSEVENTAGGREGATION_COUNT       FormulaAndFunctionsEventAggregation = "count"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_CARDINALITY FormulaAndFunctionsEventAggregation = "cardinality"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_PC75        FormulaAndFunctionsEventAggregation = "pc75"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_PC90        FormulaAndFunctionsEventAggregation = "pc90"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_PC95        FormulaAndFunctionsEventAggregation = "pc95"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_PC98        FormulaAndFunctionsEventAggregation = "pc98"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_PC99        FormulaAndFunctionsEventAggregation = "pc99"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_SUM         FormulaAndFunctionsEventAggregation = "sum"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_MIN         FormulaAndFunctionsEventAggregation = "min"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_MAX         FormulaAndFunctionsEventAggregation = "max"
	FORMULAANDFUNCTIONSEVENTAGGREGATION_AVG         FormulaAndFunctionsEventAggregation = "avg"
)

func (v *FormulaAndFunctionsEventAggregation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormulaAndFunctionsEventAggregation(value)
	for _, existing := range []FormulaAndFunctionsEventAggregation{"count", "cardinality", "pc75", "pc90", "pc95", "pc98", "pc99", "sum", "min", "max", "avg"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormulaAndFunctionsEventAggregation", value)
}

// Ptr returns reference to FormulaAndFunctionsEventAggregation value
func (v FormulaAndFunctionsEventAggregation) Ptr() *FormulaAndFunctionsEventAggregation {
	return &v
}

type NullableFormulaAndFunctionsEventAggregation struct {
	value *FormulaAndFunctionsEventAggregation
	isSet bool
}

func (v NullableFormulaAndFunctionsEventAggregation) Get() *FormulaAndFunctionsEventAggregation {
	return v.value
}

func (v *NullableFormulaAndFunctionsEventAggregation) Set(val *FormulaAndFunctionsEventAggregation) {
	v.value = val
	v.isSet = true
}

func (v NullableFormulaAndFunctionsEventAggregation) IsSet() bool {
	return v.isSet
}

func (v *NullableFormulaAndFunctionsEventAggregation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormulaAndFunctionsEventAggregation(val *FormulaAndFunctionsEventAggregation) *NullableFormulaAndFunctionsEventAggregation {
	return &NullableFormulaAndFunctionsEventAggregation{value: val, isSet: true}
}

func (v NullableFormulaAndFunctionsEventAggregation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormulaAndFunctionsEventAggregation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
