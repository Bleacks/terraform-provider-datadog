/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datadog

import (
	"encoding/json"
	"fmt"
)

// FormulaAndFunctionOrder The sort order for results.
type FormulaAndFunctionOrder string

// List of FormulaAndFunctionOrder
const (
	FORMULAANDFUNCTIONORDER_ASC  FormulaAndFunctionOrder = "asc"
	FORMULAANDFUNCTIONORDER_DESC FormulaAndFunctionOrder = "desc"
)

func (v *FormulaAndFunctionOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FormulaAndFunctionOrder(value)
	for _, existing := range []FormulaAndFunctionOrder{"asc", "desc"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FormulaAndFunctionOrder", value)
}

// Ptr returns reference to FormulaAndFunctionOrder value
func (v FormulaAndFunctionOrder) Ptr() *FormulaAndFunctionOrder {
	return &v
}

type NullableFormulaAndFunctionOrder struct {
	value *FormulaAndFunctionOrder
	isSet bool
}

func (v NullableFormulaAndFunctionOrder) Get() *FormulaAndFunctionOrder {
	return v.value
}

func (v *NullableFormulaAndFunctionOrder) Set(val *FormulaAndFunctionOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableFormulaAndFunctionOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableFormulaAndFunctionOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormulaAndFunctionOrder(val *FormulaAndFunctionOrder) *NullableFormulaAndFunctionOrder {
	return &NullableFormulaAndFunctionOrder{value: val, isSet: true}
}

func (v NullableFormulaAndFunctionOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormulaAndFunctionOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
